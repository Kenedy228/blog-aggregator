// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
select add_feed from add_feed($1::uuid,
    $2::timestamp,
    $3::timestamp,
    $4::text,
    $5::text,
    $6::text)
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	Username  string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (uuid.NullUUID, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.Username,
	)
	var add_feed uuid.NullUUID
	err := row.Scan(&add_feed)
	return add_feed, err
}

const getFeedsWithUsers = `-- name: GetFeedsWithUsers :many
select feeds.name, feeds.url, users.name from users
inner join feeds on feeds.user_id = users.id
`

type GetFeedsWithUsersRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) GetFeedsWithUsers(ctx context.Context) ([]GetFeedsWithUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUsersRow
	for rows.Next() {
		var i GetFeedsWithUsersRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
