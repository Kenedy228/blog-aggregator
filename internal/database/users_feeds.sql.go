// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
select (f).id::uuid as id,
(f).created_at::timestamp as created_at,
(f).updated_at::timestamp as updated_at,
(f).user_name::text as user_name,
(f).feed_name::text as feed_name from follow_feed(
    $1::uuid, 
    $2::timestamp, $3::timestamp,
    $4::text, $5::text) as f
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	Url       string
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserName,
		arg.Url,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowsForUserByUrl = `-- name: DeleteFeedFollowsForUserByUrl :exec
select unfollow_feed($1::text, $2::text)
`

type DeleteFeedFollowsForUserByUrlParams struct {
	Url      string
	UserName string
}

func (q *Queries) DeleteFeedFollowsForUserByUrl(ctx context.Context, arg DeleteFeedFollowsForUserByUrlParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowsForUserByUrl, arg.Url, arg.UserName)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
select (f).user_name::text as user_name, 
(f).feed_name::text as feed_name, (f).feed_url::text as feed_url
from feed_follows_for_users($1::text) as f
`

type GetFeedFollowsForUserRow struct {
	UserName string
	FeedName string
	FeedUrl  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userName string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.UserName, &i.FeedName, &i.FeedUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
